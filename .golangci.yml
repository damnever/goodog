run:
  concurrency: 4
  deadline: 10m
  issues-exit-code: 1
  tests: true
  skip-dirs:
    - vendor
    - bin
  # skip-files:
    # - .*_test\.go
  modules-download-mode: readonly


output:
  # colored-line-number|line-number|json|tab|checkstyle|code-climate, default is "colored-line-number"
  format: colored-line-number
  print-issued-lines: true
  # print linter name in the end of issue text, default is true
  print-linter-name: true


linters-settings:
  errcheck:
    check-type-assertions: false
    check-blank: false
  govet:
    check-shadowing: true  # https://github.com/golang/go/issues/19490
    settings:
      printf: # analyzer name, run `go tool vet help` to see all analyzers
        funcs: # run `go tool vet help printf` to see available settings for `printf` analyzer
          - Debugf
          - Infof
          - Warnf
          - Errorf
          - Panicf
          - Fatalf
  golint:
    min-confidence: 0.8
  gofmt:
    simplify: false
  goimports:
    local-prefixes: github.com/damnever/goodog
  gocyclo:
    min-complexity: 30
  maligned:
    suggest-new: true
  dupl:
    threshold: 100
  goconst:
    min-len: 2
    min-occurrences: 2
  depguard:
    list-type: blacklist
    include-go-root: false
    packages:
      - github.com/davecgh/go-spew/spew
  misspell:
    locale: US
  lll:
    line-length: 120
    tab-width: 1
  funlen:
    lines: 120
    statements: 66
  unused:
    check-exported: false
  unparam:
    check-exported: false
  nakedret:
    max-func-lines: 30
  prealloc:
    # XXX: we don't recommend using this linter before doing performance profiling.
    # For most programs usage of prealloc will be a premature optimization.
    # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
    # True by default.
    simple: true
    range-loops: true # Report preallocation suggestions on range loops, true by default
    for-loops: false # Report preallocation suggestions on for loops, false by default
  gocritic:
    # Which checks should be enabled; can't be combined with 'disabled-checks';
    # See https://go-critic.github.io/overview#checks-overview
    # To check which checks are enabled run `GL_DEBUG=gocritic golangci-lint run`
    # By default list of stable checks is used.
    enabled-checks:
    # Which checks should be disabled; can't be combined with 'enabled-checks'; default is empty
    disabled-checks:
      - regexpMust
      # Enable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint` run to see all tags and checks.
      # Empty list by default. See https://github.com/go-critic/go-critic#usage -> section "Tags".
    enabled-tags:
      - performance
    settings: # settings passed to gocritic
      captLocal: # must be valid enabled check name
        paramsOnly: true
      rangeValCopy:
        sizeThreshold: 128
      hugeParam:
        sizeThreshold: 512
  nestif:
    min-complexity: 8
  testpackage:
    skip-regexp: internal

linters:
  enable-all: true
  disable:
    - maligned
    - prealloc
    - interfacer
    - wsl
    - godox
    - gochecknoinits
    - gomnd
    - dogsled
  disable-all: false


issues:
  # Excluding configuration per-path and per-linter
  exclude-rules:
    - path: frontend/connector.go
      text: "G402: TLS InsecureSkipVerify may be true."
      linters:
        - gosec
    - path: main.go
      linters:
        - gochecknoglobals
        - gosec
    # Defaults
    # Exclude some linters from running on tests files.
    - path: _test\.go
      linters:
        - gocyclo
        - errcheck
        - dupl
        - gosec
    # Exclude known linters from partially hard-vendored code,
    # which is impossible to exclude via "nolint" comments.
    - path: internal/hmac/
      text: "weak cryptographic primitive"
      linters:
        - gosec

    - linters:
      - gosimple
      text: "S1019:"
    - linters:
      - staticcheck
      text: "SA1012:"
    - linters:
      - gochecknoglobals
      - deadcode
      - unused
      text: "`_"
    - linters:
      - goerr113
      text: "do not define dynamic errors, use wrapped static errors instead"
